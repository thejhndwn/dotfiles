#!/bin/bash

TODO_FILE="$1"

if [[ -z "$TODO_FILE" ]]; then
  echo "Usage: $0 path/to/todo.md"
  exit 1
fi

if [[ ! -f "$TODO_FILE" ]]; then
  echo "File not found: $TODO_FILE"
  exit 1
fi

# Find line number of "# Today"
today_start=$(grep -n "^# Today" "$TODO_FILE" | cut -d: -f1)
if [[ -z "$today_start" ]]; then
  echo "No '# Today' section found."
  exit 1
fi

# Find line number of next header after # Today
total_lines=$(wc -l < "$TODO_FILE")
next_header=$(tail -n +$((today_start+1)) "$TODO_FILE" | grep -n "^#" | head -n1 | cut -d: -f1)
if [[ -z "$next_header" ]]; then
  today_end=$total_lines
else
  today_end=$((today_start + next_header -1))
fi

# Collect unmarked todo lines between today_start and today_end
declare -a todo_lines
declare -a todo_line_numbers

idx=0
for (( lineno=today_start+1; lineno<=today_end; lineno++ )); do
  line=$(sed -n "${lineno}p" "$TODO_FILE")
  if [[ "$line" =~ "^- \[ \]" ]]; then
    todo_lines[idx]="$line"
    todo_line_numbers[idx]=$lineno
    ((idx++))
  fi
done

if [[ ${#todo_lines[@]} -eq 0 ]]; then
  echo "No unmarked todo items found under '# Today'."
  exit 0
fi

mark_item() {
  local lineno=$1
  sed -i "${lineno}s/- \[ \]/- [x]/" "$TODO_FILE"
  echo "‚úÖ Marked line $lineno as done."
}

print_list() {
  echo "TODAY TODOs:"
  for i in "${!todo_lines[@]}"; do
    printf "[%d] %s\n" $((i+1)) "${todo_lines[i]}"
  done
  echo
  echo "Enter number to mark complete, or any other key to exit."
}

while true; do
  # Refresh todo lines in case of updates
  todo_lines=()
  todo_line_numbers=()
  idx=0
  for (( lineno=today_start+1; lineno<=today_end; lineno++ )); do
    line=$(sed -n "${lineno}p" "$TODO_FILE")
    if [[ "$line" =~ "^- \[ \]" ]]; then
      todo_lines[idx]="$line"
      todo_line_numbers[idx]=$lineno
      ((idx++))
    fi
  done

  if [[ ${#todo_lines[@]} -eq 0 ]]; then
    echo "üéâ All todo items under '# Today' are marked complete!"
    break
  fi

  print_list

  read -rp "> " input
  if [[ ! $input =~ ^[0-9]+$ ]]; then
    echo "Exiting."
    break
  fi

  if (( input < 1 || input > ${#todo_lines[@]} )); then
    echo "‚ùå Invalid number. Try again."
    continue
  fi

  mark_item "${todo_line_numbers[$((input-1))]}"
done

